This directory contains a formalisation of pattern matching.

Normally, pattern matches are removed from the input by the parser of
HOL4. An implementation of a pattern-match compilation algorithm
replaces them with decision trees using primitive case-split functions
for each involved type. The pretty printer prints the resulting decision
trees in the form of pattern matches again. Both the pattern-compilation
and the pretty printer are long, complicated ML-programs. As such, we
are not sure, whether we can really trust them.

Usually this is not a big issue. One can use simple pattern matches in
a definition and then prove theorems expressing the semantics of the new
definition not using pattern matching. This is advisable anyhow, since
the command `Define` can behave unexpectedly anyhow. However, as soon as
pattern matching is used extensively, this becomes infeasible. For
example consider the ARM disassembler function `arm_decode` in
`examples/ARM/v7/arm_decoderScript.sml`. Why should we trust the result
of the pattern match compilation in such definitions?

This pattern matching library tries to solve this problem. It provides
a representation of case-expressions that closely follows
the input syntax. The parsing and pretty printing of these 
case-expressions is much simpler and therefore more trustworthy. The
complicated, untrusted pattern match compilation can then be performed
inside the logic. Therefore, the need to trust the implementation of
the pattern match compilation is removed. In some sense, we have a
deep pattern compilation now.

Moreover, the new case-expressions provide additional features like
guards, views, free variables in patterns or multiple occurrences of a
bound variable inside a pattern. 

Most of the example consists of tool support for working with the new
case-expressions inside the logic. There are simplification and
(partial) evaluation tools, tools that convert between the classical
and new representation. A tool for exhaustiveness checks.  Tools that
remove redundant rows or eliminate guards to double variable bindings
and much more.